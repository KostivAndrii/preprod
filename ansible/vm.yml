- name: Create Azure VM
  hosts: localhost
  connection: local

  vars:
    RG            : RG001
    location      : francecentral
    offer         : WindowsServer
    publisher     : MicrosoftWindowsServer
    sku           : 2016-Datacenter
    version       : latest
    vm_size       : Standard_D2s_v3
    FrontEndPort  : 80
    BackEndPort   : 8080
    probeFailCount: 2
    probeInterval : 5
    os_type       : Windows
    admin_user    : azureuser
    admin_pass    : Pa$$w0rd
    man_disk_type : Premium_LRS
    man_disk_size : 64
    vNet_IP       : "10.0.0.0/16"
    sNet_IP       : "10.0.1.0/24"
    vNet_name     : "{{ RG }}_vNet"
    AS_name       : "{{ RG }}_AS"
    PIP_name      : "{{ RG }}_PIP"
    NSG_name      : "{{ RG }}_NSG"
    LB_name       : "{{ RG }}_LB"
    NIC1_name     : "{{ RG }}_NIC1"
    NIC2_name     : "{{ RG }}_NIC2"
    VM1_name      : "{{ RG }}_VM1"
    VM2_name      : "{{ RG }}_VM2"

  tasks:
  - name: Create resource group
    azure_rm_resourcegroup:
      name: "{{ RG }}"
      location: "{{ location }}"

  - name: Create an availability set with advanced options
    azure_rm_availabilityset:
      name: "{{ AS_name }}"
      location: "{{ location }}"
      resource_group: "{{ RG }}"
      platform_update_domain_count: 2
      platform_fault_domain_count: 2
      sku: Aligned

  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: "{{ RG }}"
      name: "{{ vNet_name }}"
      address_prefixes: "{{ vNet_IP }}"

  - name: Add subnet
    azure_rm_subnet:
      resource_group: "{{ RG }}"
      name: mySubnet
      address_prefix: "{{ sNet_IP }}"
      virtual_network: "{{ vNet_name }}"

  - name: Create public IP address
    azure_rm_publicipaddress:
      resource_group: "{{ RG }}"
      allocation_method: Static
      name: "{{ PIP_name }}"
    register: output_ip_address

  - name: Dump public IP for VM which will be created
    debug:
      msg: "The public IP is {{ output_ip_address.state.ip_address }}."

  - name: Create Network Security Group that allows HTTP
    azure_rm_securitygroup:
      resource_group: "{{ RG }}"
      name: "{{ NSG_name }}"
      rules:
        - name: Allow_HTTP
          protocol: Tcp
          destination_port_range: "{{ BackEndPort }}"
          access: Allow
          priority: 1000
          direction: Inbound

  - name: create load balancer
    azure_rm_loadbalancer:
      resource_group: "{{ RG }}"
      name: "{{ LB_name }}"
      frontend_ip_configurations:
        - name: frontendipconf0
          public_ip_address: "{{ PIP_name }}"
          private_ip_allocation_method: Dynamic
      backend_address_pools:
        - name: backendaddrpool0
      probes:
        - name: prob0
          interval: "{{ probeInterval }}"
          fail_count: "{{ probeFailCount }}"
          port: "{{ BackEndPort }}"
      load_balancing_rules:
        - name: lbrbalancingrule0
          frontend_ip_configuration: frontendipconf0
          backend_address_pool: backendaddrpool0
          frontend_port: "{{ FrontEndPort }}"
          backend_port: "{{ BackEndPort }}"
          probe: prob0

  - name: Create virtual network inteface card
    azure_rm_networkinterface:
      resource_group: "{{ RG }}"
      name: "{{ NIC1_name }}"
      virtual_network: "{{ vNet_name }}"
      subnet: mySubnet
      security_group: "{{ NSG_name }}"
      ip_configurations:
        - name: ipconfig1
          primary: True
          load_balancer_backend_address_pools:
            - name: backendaddrpool0
              load_balancer: "{{ LB_name }}"

  - name: Create virtual network inteface card
    azure_rm_networkinterface:
      resource_group: "{{ RG }}"
      name: "{{ NIC2_name }}"
      virtual_network: "{{ vNet_name }}"
      subnet: mySubnet
      security_group: "{{ NSG_name }}"
      ip_configurations:
        - name: ipconfig1
          primary: True
          load_balancer_backend_address_pools:
            - name: backendaddrpool0
              load_balancer: "{{ LB_name }}"

  - name: Create VM1
    azure_rm_virtualmachine:
      resource_group: "{{ RG }}"
      name: "{{ VM1_name }}"
      availability_set: "{{ AS_name }}"
      vm_size: "{{ vm_size }}"
      managed_disk_type: "{{ man_disk_type }}"
      short_hostname: "{{ RG }}VM1"
      os_type: "{{ os_type }}" 
      admin_username: "{{ admin_user }}"
      admin_password: "{{ admin_pass }}"
      network_interfaces: "{{ NIC1_name }}"
      image:
        offer: "{{ offer }}"
        publisher: "{{ publisher }}"
        sku: "{{ sku }}"
        version: "{{ version }}"
      data_disks:
        - lun: 0
          disk_size_gb: "{{ man_disk_size }}"
          managed_disk_type: "{{ man_disk_type }}"

  - name: Create VM2
    azure_rm_virtualmachine:
      resource_group: "{{ RG }}"
      name: "{{ VM2_name }}"
      availability_set: "{{ AS_name }}"
      vm_size: "{{ vm_size }}"
      managed_disk_type: "{{ man_disk_type }}"
      short_hostname: "{{ RG }}VM2"
      os_type: "{{ os_type }}"
      admin_username: "{{ admin_user }}"
      admin_password: "{{ admin_pass }}"
      network_interfaces: "{{ NIC2_name }}"
      image:
        offer: "{{ offer }}"
        publisher: "{{ publisher }}"
        sku: "{{ sku }}"
        version: "{{ version }}"
      data_disks:
        - lun: 0
          disk_size_gb: "{{ man_disk_size }}"
          managed_disk_type: "{{ man_disk_type }}"


  - name: create Azure vm extension to install IIS 1a
    azure_rm_virtualmachine_extension:
      name: IIS-config1a
      resource_group: "{{ RG }}"
      virtual_machine_name: "{{ VM1_name }}"
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: 1.9
      settings: '{"commandToExecute": "powershell Add-WindowsFeature Web-Server; powershell mkdir \"C:\\inetpub\\hello\"; powershell Add-Content -Path \"C:\\inetpub\\hello\\Default.htm\" -Value Hello_Word_from_VM1"}'
      auto_upgrade_minor_version: true

  - name: Delete VM Extension 1a
    azure_rm_virtualmachine_extension:
      name: IIS-config1a
      resource_group: "{{ RG }}"
      virtual_machine_name: "{{ VM1_name }}"
      state: absent

  - name: create Azure vm extension to install IIS 1b
    azure_rm_virtualmachine_extension:
      name: IIS-config1b
      resource_group: "{{ RG }}"
      virtual_machine_name: "{{ VM1_name }}"
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: 1.9
      settings: '{"commandToExecute": "powershell New-IISSite -Name \"Hello word!\" -BindingInformation \"*:8080:\" -PhysicalPath \"C:\\inetpub\\hello\"; powershell New-NetFirewallRule -DisplayName \"HTTP(S) Inbound\" -Profile Any -Direc
tion Inbound -Action Allow -Protocol TCP -LocalPort @(\"8080\")"}'
      auto_upgrade_minor_version: true


  - name: create Azure vm extension to install IIS 2a
    azure_rm_virtualmachine_extension:
      name: IIS-config2a
      resource_group: "{{ RG }}"
      virtual_machine_name: "{{ VM2_name }}"
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: 1.9
      settings: '{"commandToExecute": "powershell Add-WindowsFeature Web-Server; powershell mkdir \"C:\\inetpub\\hello\"; powershell Add-Content -Path \"C:\\inetpub\\hello\\Default.htm\" -Value Hello_Word_from_VM2"}'
      auto_upgrade_minor_version: true

  - name: Delete VM Extension 2a
    azure_rm_virtualmachine_extension:
      name: IIS-config2a
      resource_group: "{{ RG }}"
      virtual_machine_name: "{{ VM2_name }}"
      state: absent


  - name: create Azure vm extension to install IIS 2b
    azure_rm_virtualmachine_extension:
      name: IIS-config2b
      resource_group: "{{ RG }}"
      virtual_machine_name: "{{ VM2_name }}"
      publisher: Microsoft.Compute
      virtual_machine_extension_type: CustomScriptExtension
      type_handler_version: 1.9
      settings: '{"commandToExecute": "powershell New-IISSite -Name \"Hello word!\" -BindingInformation \"*:8080:\" -PhysicalPath \"C:\\inetpub\\hello\"; powershell New-NetFirewallRule -DisplayName \"HTTP(S) Inbound\" -Profil
e Any -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(\"8080\")"}'
      auto_upgrade_minor_version: true


